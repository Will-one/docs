(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{574:function(t,a,i){"use strict";i.r(a);var v=i(10),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"p2-开始使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p2-开始使用"}},[t._v("#")]),t._v(" p2 开始使用")]),t._v(" "),i("p",[t._v("搜索官方下载地址进行下载")]),t._v(" "),i("p",[t._v("最开始需要配置个人的用户名称和电子邮箱")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('git config --global user.name "willone"\ngit config --global user.email "xxx@example.com"\n')])])]),i("p",[t._v("检查已有的配置")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git config --list\n")])])]),i("h3",{attrs:{id:""}},[i("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),i("p",[t._v("初始化仓库")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git init\n")])])]),i("h2",{attrs:{id:"p3-简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p3-简介"}},[t._v("#")]),t._v(" p3 简介")]),t._v(" "),i("h3",{attrs:{id:"区域"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#区域"}},[t._v("#")]),t._v(" 区域")]),t._v(" "),i("p",[t._v("工作区\n暂存区\n版本库")]),t._v(" "),i("h3",{attrs:{id:"对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),i("p",[t._v("git对象\n树对象\n提交对象")]),t._v(" "),i("h2",{attrs:{id:"p4-git对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p4-git对象"}},[t._v("#")]),t._v(" p4 git对象")]),t._v(" "),i("p",[t._v("Git的核心部分是一个简单的键值对数据库，可以通过命令想数据库中插入任意类型的内容，会返回一个键值，\n通过该键值可以在任意时刻再次检索该内容")]),t._v(" "),i("h3",{attrs:{id:"向数据库中写入内容-并返回对应键值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#向数据库中写入内容-并返回对应键值"}},[t._v("#")]),t._v(" 向数据库中写入内容 并返回对应键值")]),t._v(" "),i("ul",[i("li",[t._v("命令：")])]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("echo 'content' | git hash-object -w --stdin\n")])])]),i("p",[t._v("选项说明：")]),t._v(" "),i("ol",[i("li",[t._v("-w 选项指示 hash-object 命令存储数据对象，若不指定此选项，则该命令仅仅返回对应的键值")]),t._v(" "),i("li",[t._v("--stdin （standard input）选项则指示该命令 该命令从标准输入读取内容，若不指定此选项，则需在命令尾部给出待存储文件的路径")])]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("// 存文件\ngit hash-object -w 文件路径\n\n// 返回对应文件的键值\ngit hash-object 文件路径\n")])])]),i("ul",[i("li",[t._v("返回\n该命令输出一个长度为40个字符的效验和。这是一个SHA-1 哈希值")])]),t._v(" "),i("h3",{attrs:{id:"查看-git-如何存储数据"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看-git-如何存储数据"}},[t._v("#")]),t._v(" 查看 git 如何存储数据")]),t._v(" "),i("ul",[i("li",[t._v("命令：\nfind .git/objects -type f")]),t._v(" "),i("li",[t._v("返回：\n.git/object/d6/dlsafajfld8faj3leafjl4afmd4femalj32\n这就是 git 存储内容的方式：一个文件对应一条内容。效验和的两个字符用于命名子目录，余下的38个祖父用于作为文件名")])]),t._v(" "),i("h3",{attrs:{id:"根据键值拉去数据"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#根据键值拉去数据"}},[t._v("#")]),t._v(" 根据键值拉去数据")]),t._v(" "),i("ul",[i("li",[t._v("命令：\ngit cat-file -p d6dlsafajfld8faj3leafjl4afmd4femalj32\n-p 选项可指示该命令自动判断内容的类型，并显式为格式友好的内容")]),t._v(" "),i("li",[t._v("返回：\n对应文件的内容")])]),t._v(" "),i("h2",{attrs:{id:"p5-树对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p5-树对象"}},[t._v("#")]),t._v(" p5 树对象")]),t._v(" "),i("p",[t._v("树对象（tree object），它能解决文件名保存的问题，也允许我们将对个文件组织到一起。Git以一种类似于UNIX文件系统的方式存储内容。所有内容均以树对象和数据存储对象（git对象）的形式存储，其中树对象对应了UNIX 中的目录项，数据对象（git对象）则大致上对应文件内容。一个树对象包含了一条或者多条记录（每条记录含有一个指向git对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息）。一个树对象也可以包含另一个树对象。")]),t._v(" "),i("h3",{attrs:{id:"查看树对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看树对象"}},[t._v("#")]),t._v(" 查看树对象")]),t._v(" "),i("ul",[i("li",[t._v("命令：\ngit cat-file -p master^{tree}(或者是数对象的hash)\nmaster^{tree} 语法便是 master 分支上最新的提交所指向的树对象。")]),t._v(" "),i("li",[t._v("返回：")])]),t._v(" "),i("h3",{attrs:{id:"构建树对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#构建树对象"}},[t._v("#")]),t._v(" 构建树对象")]),t._v(" "),i("p",[t._v("可以通过 update-index、write-tree、read-tree等命令来构建一个树对象并放入暂存区。")]),t._v(" "),i("ul",[i("li",[t._v("操作\n"),i("ol",[i("li",[t._v("利用update-index命令 为 test.txt 文件的首个版本创建一个暂存区。并通过write-tree命令生成树对象。")])]),t._v(" "),i("ul",[i("li",[t._v("命令：\ngit update-index --add --cacheinfo 100622 "),i("br"),t._v("\nd6dlsafajfld8faj3leafjl4afmd4femalj32\ngit write-tree\n文件模式为 100644，表明这是一个普通文件\n100755，表明一个可执行文件\n120000，表明一个符号链接\n--add选项：\n因为此前文件并不在暂存区中，首次需要 --add\n--cacheinfo选项：\n因为将要添加的文件位于git数据库中，而不是位于当前目录下 所以需要 --cacheinfo")])]),t._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[t._v("新增 new.txt 将new.txt 和 test.txt 文件的第二个版本放入暂存区。\n。。。。")])])])]),t._v(" "),i("h2",{attrs:{id:"p6-提交对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p6-提交对象"}},[t._v("#")]),t._v(" p6 提交对象")]),t._v(" "),i("p",[t._v("我们可以通过调用commit-tree命令创建一个提交对象，为此需要指定一个树对象的 SHA-1 值，以及本次提交的 父提交对象 （如果有的话，暂存区的首次快照就没有父对象）")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("创建提交对象\necho 'first commit' | git commit-tree d8239f\n返回：d6dlsafajfld8faj3leafjl4afmd4femalj32")])]),t._v(" "),i("li",[i("p",[t._v("查看提交对象\ngit cat-file -p fdf4c3")])]),t._v(" "),i("li",[i("p",[t._v("提交对象的格式\n提交对象的格式很简单：它先指定一个顶层树对象，代表当前项目快照；然后是作者/提交者信息（依据user.name 和 user.email 配置来设定，外加一个时间戳），留空一行，最后是提交注释")])])]),t._v(" "),i("h2",{attrs:{id:"p7-高层命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p7-高层命令"}},[t._v("#")]),t._v(" p7 高层命令")]),t._v(" "),i("p",[t._v("git操作最基本的流程")]),t._v(" "),i("ol",[i("li",[i("p",[t._v("创建工作目录，对工作目录和里面的文件进行修改")])]),t._v(" "),i("li",[i("p",[t._v("git add ./\n这个命令相当于以下命令的集合")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("//修改了多少个工作目录中的文件，此命令就被执行多少次\ngit hash-object -w 文件名\n\n//创建暂存区\ngit update-index ....\n")])])])]),t._v(" "),i("li",[i("p",[t._v('git commit -m "注释"\n这个命令相当于以下命令的集合')]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("// 生成树对象\ngit write-tree\n// 生成提交对象\ngit commit-tree\n")])])])])]),t._v(" "),i("h2",{attrs:{id:"p8-p9-高层命令-crud"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p8-p9-高层命令-crud"}},[t._v("#")]),t._v(" p8-p9 高层命令（CRUD）")]),t._v(" "),i("h3",{attrs:{id:"git-status"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),i("p",[t._v("查看文件的状态")]),t._v(" "),i("h3",{attrs:{id:"git-diff"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),i("ol",[i("li",[t._v("当前做了哪些修改还没有暂存\n命令：git diff")]),t._v(" "),i("li",[t._v("哪些更新已经暂存好了准备下次提交\n命令：git diff --cached 或者 git diff --staged（1.6.1版本以上）")])]),t._v(" "),i("h3",{attrs:{id:"git-commit-a"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-a"}},[t._v("#")]),t._v(" git commit -a")]),t._v(" "),i("p",[t._v("加上-a可以将跟踪的文件暂存起来一并提交，相当执行了\ngit add .\ngit commit")]),t._v(" "),i("h3",{attrs:{id:"git-log"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),i("p",[t._v("查看日志，q键退出")]),t._v(" "),i("ol",[i("li",[t._v("git log --pretty=oneline")]),t._v(" "),i("li",[t._v("git log --oneline")]),t._v(" "),i("li",[t._v("git reflog  ：显示所有操作")])]),t._v(" "),i("h3",{attrs:{id:"git-rm"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-rm"}},[t._v("#")]),t._v(" git rm")]),t._v(" "),i("p",[t._v("可以使用： git rm 文件名\n相当于：")]),t._v(" "),i("ol",[i("li",[t._v("删除文件")]),t._v(" "),i("li",[t._v("git add .")])]),t._v(" "),i("h3",{attrs:{id:"git-mv"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-mv"}},[t._v("#")]),t._v(" git mv")]),t._v(" "),i("p",[t._v("将工作目录中的文件改名并放入暂存区\ngit mv 原文件名 新文件名")]),t._v(" "),i("h2",{attrs:{id:"p10-分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p10-分支"}},[t._v("#")]),t._v(" p10 分支")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("显示分支\ngit branch\ngit branch -v 查看每一个分支最后一次提交\ngit branch name commitHash 新建一个分支并且指向commitHash 提交对象\ngit branch --merged 查看哪些分支已经合并到当前分支\ngit branch --no-merged 查看所有包含未合并工作的分支")])]),t._v(" "),i("li",[i("p",[t._v("创建一个分支\ngit branch 分支名")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"title"},[t._v("原理")]),i("p",[t._v("在当前的提交对象上创建创建一个指针")])])]),t._v(" "),i("li",[i("p",[t._v("删除一个分支\ngit branch -d 分支名")])])]),t._v(" "),i("h3",{attrs:{id:"切换分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"title"}),i("p",[t._v("注意：切换分支的时候，如果当前分支上有 未暂存的修改 或者 有未提价的暂存\n分支可以切换，但是这种操作可能会污染其他分支")])]),i("p",[t._v("git checkout 分支名")]),t._v(" "),i("p",[t._v("新建并切换分支\ngit checkout -b 分支名")]),t._v(" "),i("h3",{attrs:{id:"合并分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),i("p",[t._v("切换到主分支，然后\ngit merge 分支名")]),t._v(" "),i("h2",{attrs:{id:"分支存储"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支存储"}},[t._v("#")]),t._v(" 分支存储")]),t._v(" "),i("p",[t._v("有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态。而此时需要切换到另一个分支工作。但是，不想将当前这些代码创建一次提交。这个时候可以用git stash")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git stash")]),t._v(" "),i("p",[t._v("git stash 命令会将未完成的修改保存到一个栈上，可以在任何时候重新应用这些改动（git stash apply）")])])]),t._v(" "),i("p",[t._v("git stash list 查看存储")]),t._v(" "),i("p",[t._v("git stash apply stash@{2}")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[t._v("如果不指定一个存储，git认为指定的是最近的存储\n")])])]),i("p",[t._v("git stash pop 应用存储然后立即从栈上扔掉它【用的多】")]),t._v(" "),i("p",[t._v("git stash drop stash@{0}加上要溢出的存储的名字来溢出它")]),t._v(" "),i("h2",{attrs:{id:"git-回退【后悔药】"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-回退【后悔药】"}},[t._v("#")]),t._v(" Git 回退【后悔药】")]),t._v(" "),i("p",[t._v("注意：回退的前提是文件已经被跟踪")]),t._v(" "),i("h3",{attrs:{id:"工作区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#工作区"}},[t._v("#")]),t._v(" 工作区")]),t._v(" "),i("ul",[i("li",[t._v("如何撤回自己在工作目录中的修改：git checkout -- filename")]),t._v(" "),i("li",[t._v("新版本已经改为：git restore filename")])]),t._v(" "),i("h3",{attrs:{id:"暂存区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[t._v("#")]),t._v(" 暂存区")]),t._v(" "),i("ul",[i("li",[t._v("如何撤回自己的缓存：git reset HEAD filename")])]),t._v(" "),i("h3",{attrs:{id:"版本库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本库"}},[t._v("#")]),t._v(" 版本库")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("一个提交对象多次提交：")]),t._v(" "),i("ol",[i("li",[t._v("注释写错了 git commit --amend")]),t._v(" "),i("li",[t._v("多次提交，只生产一个提交对象git commit --amend")])])]),t._v(" "),i("li",[i("p",[t._v("重置提交对象")]),t._v(" "),i("ol",[i("li",[t._v("git reset --soft HEAD^")]),t._v(" "),i("li",[t._v("git reset --soft HEAD~3")]),t._v(" "),i("li",[t._v("git reset --soft commitID")])])])]),t._v(" "),i("p",[t._v("选项说明")]),t._v(" "),i("p",[t._v("--hard 删除改动代码，撤销git add")]),t._v(" "),i("p",[t._v("--soft 不删除改动的代码，不撤销git add")]),t._v(" "),i("p",[t._v("--mixed 不删除改动代码，撤销git add")]),t._v(" "),i("h2",{attrs:{id:"p11-git设置签名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p11-git设置签名"}},[t._v("#")]),t._v(" p11 git设置签名")]),t._v(" "),i("ul",[i("li",[t._v("项目级别/仓库级别：仅在当前本地库范围内有效\n"),i("ul",[i("li",[t._v("git config user.name willone")]),t._v(" "),i("li",[t._v("git config user.email willone@gmail.com")]),t._v(" "),i("li",[t._v("信息保存的位置：./.git/config")])])]),t._v(" "),i("li",[t._v("系统用户级别：登录当前操作系统的用户范围\n"),i("ul",[i("li",[t._v("git config --global user.name willone")]),t._v(" "),i("li",[t._v("git config --global user.email willone@gmail.com")]),t._v(" "),i("li",[t._v("信息保存的位置：~/.gitconfig 文件")])])]),t._v(" "),i("li",[t._v("查看配置信息：git config --list")])]),t._v(" "),i("h2",{attrs:{id:"p12-添加提交并查看状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p12-添加提交并查看状态"}},[t._v("#")]),t._v(" p12 添加提交并查看状态")]),t._v(" "),i("h3",{attrs:{id:"状态查看操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#状态查看操作"}},[t._v("#")]),t._v(" 状态查看操作")]),t._v(" "),i("ul",[i("li",[t._v("git status\n查看工作区、暂存区状态")])]),t._v(" "),i("h3",{attrs:{id:"添加操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#添加操作"}},[t._v("#")]),t._v(" 添加操作")]),t._v(" "),i("ul",[i("li",[t._v("git add [file name]\n将工作区的 “新建/修改” 添加到暂存区")])]),t._v(" "),i("h3",{attrs:{id:"提交操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提交操作"}},[t._v("#")]),t._v(" 提交操作")]),t._v(" "),i("ul",[i("li",[t._v('git commit -m "commit message" [file name]\n将暂存区的内容提交到本地库')])]),t._v(" "),i("h2",{attrs:{id:"p15-查看历史记录的几种不同方式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p15-查看历史记录的几种不同方式"}},[t._v("#")]),t._v(" p15 查看历史记录的几种不同方式")]),t._v(" "),i("ul",[i("li",[t._v("git log\n"),i("ul",[i("li",[t._v("显示的很详细")]),t._v(" "),i("li",[t._v("多屏显示的控制方式：空格向下翻页、b向上翻页、q退出")])])]),t._v(" "),i("li",[t._v("git log --pretty=oneline\n"),i("ul",[i("li",[t._v("显示简洁")])])]),t._v(" "),i("li",[t._v("git log --oneline\n"),i("ul",[i("li",[t._v("更简洁，hash取了前7位")])])]),t._v(" "),i("li",[t._v("git reflog\n"),i("ul",[i("li",[t._v("HEAD@{移动到对应版本需要的步数}")])])])]),t._v(" "),i("h2",{attrs:{id:"p17-p19-版本穿搜"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p17-p19-版本穿搜"}},[t._v("#")]),t._v(" p17-p19 版本穿搜")]),t._v(" "),i("p",[t._v("先通过git reflog 查看想要去的版本")]),t._v(" "),i("ul",[i("li",[t._v("基于索引值（提交对象hash）操作【推荐】\n"),i("ul",[i("li",[t._v("git reset --hard [提交对象hash]")])])]),t._v(" "),i("li",[t._v("使用^，几个^退几步\n"),i("ul",[i("li",[t._v("git reset --hard HEAD^")])])]),t._v(" "),i("li",[t._v("使用~，~n退n步\n"),i("ul",[i("li",[t._v("git reset --hard HEAD~3")])])])]),t._v(" "),i("h3",{attrs:{id:"reset-命令的三个选项"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reset-命令的三个选项"}},[t._v("#")]),t._v(" reset 命令的三个选项")]),t._v(" "),i("ul",[i("li",[t._v("--soft\n"),i("ul",[i("li",[t._v("在本地库移动HEAD指针")])])]),t._v(" "),i("li",[t._v("--mixed\n"),i("ul",[i("li",[t._v("在本地库移动HEAD指针")]),t._v(" "),i("li",[t._v("重置暂存区")])])]),t._v(" "),i("li",[t._v("--hard\n"),i("ul",[i("li",[t._v("在本地库移动HEAD指针")]),t._v(" "),i("li",[t._v("重置暂存区")]),t._v(" "),i("li",[t._v("重置工作区")])])])]),t._v(" "),i("h2",{attrs:{id:"p20-p22-删除文件找回"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p20-p22-删除文件找回"}},[t._v("#")]),t._v(" p20-p22 删除文件找回")]),t._v(" "),i("ul",[i("li",[t._v("前提：删除前，文件存在时的版本提交到本地库过")]),t._v(" "),i("li",[t._v("操作：git reset --hard [文件存在的版本]")])]),t._v(" "),i("h2",{attrs:{id:"p23-git-diff-比较文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p23-git-diff-比较文件"}},[t._v("#")]),t._v(" p23 git diff 比较文件")]),t._v(" "),i("ul",[i("li",[t._v("git diff [文件名]\n"),i("ul",[i("li",[t._v("比较工作区和暂存区")])])]),t._v(" "),i("li",[t._v("git diff [本地库某个版本] [文件名]\n"),i("ul",[i("li",[t._v("将工作区中的文件和本地库历史记录比较")])])]),t._v(" "),i("li",[t._v("不带文件名就比较多个文件")])]),t._v(" "),i("h2",{attrs:{id:"p25-分支操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p25-分支操作"}},[t._v("#")]),t._v(" p25 分支操作")]),t._v(" "),i("ul",[i("li",[t._v("创建分支\n"),i("ul",[i("li",[t._v("git branch [分支名]")]),t._v(" "),i("li",[t._v("git checkout -b [分支名]")])])]),t._v(" "),i("li",[t._v("查看分支\n"),i("ul",[i("li",[t._v("git branch -v")])])]),t._v(" "),i("li",[t._v("切换分支\n"),i("ul",[i("li",[t._v("git checkout [分支名]")])])]),t._v(" "),i("li",[t._v("合并分支\n"),i("ul",[i("li",[t._v("第一步：切换到接受修改的分支上（被合并，增加新内容）")]),t._v(" "),i("li",[t._v("第二步：git merge [要合并的分支名]")])])]),t._v(" "),i("li",[t._v("解决冲突\n"),i("ul",[i("li",[t._v("冲突的表现，以===分隔，<<<至===为当前分支，===至>>>为另一分支")]),t._v(" "),i("li",[t._v("冲突的解决：\n"),i("ul",[i("li",[t._v("第一步：删除特殊符号并编辑文件[选择保留某一分支的修改/整体优化到满意为止]")]),t._v(" "),i("li",[t._v("第二步：git add [文件名]")]),t._v(" "),i("li",[t._v('第三部：git commit -m "日志信息"。!!注意：此时的commit 不能带具体文件名')])])])])])]),t._v(" "),i("h2",{attrs:{id:"远程库相关-不使用ssh情况"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程库相关-不使用ssh情况"}},[t._v("#")]),t._v(" 远程库相关，不使用ssh情况")]),t._v(" "),i("h3",{attrs:{id:"创建本地库并推送关联远程库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#创建本地库并推送关联远程库"}},[t._v("#")]),t._v(" 创建本地库并推送关联远程库")]),t._v(" "),i("ul",[i("li",[t._v("创建本地和远程库\n"),i("ul",[i("li",[t._v("创建了本地库")]),t._v(" "),i("li",[t._v("创建一个远程库(新建一个repository即可，README本地可能会有，不默认添加)")])])]),t._v(" "),i("li",[t._v("推送需要知道往哪个远程地址推送（去远程库复制https的地址）\n"),i("ul",[i("li",[t._v("git remote add origin [远程库https地址]\n"),i("ul",[i("li",[t._v("添加一个远程库，别名origin")])])]),t._v(" "),i("li",[t._v("查看远程库地址 git remote show origin")])])]),t._v(" "),i("li",[t._v("推送本地库到远程\n"),i("ul",[i("li",[t._v("git push origin [要推送的分支]")])])])]),t._v(" "),i("h3",{attrs:{id:"p37-克隆操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p37-克隆操作"}},[t._v("#")]),t._v(" p37 克隆操作")]),t._v(" "),i("ul",[i("li",[t._v("命令\n"),i("ul",[i("li",[t._v("git clone [远程https的地址]")])])]),t._v(" "),i("li",[t._v("效果\n"),i("ul",[i("li",[t._v("完整的把远程库下载到本地")]),t._v(" "),i("li",[t._v("创建origin远程地址别名")]),t._v(" "),i("li",[t._v("初始化本地库")])])])]),t._v(" "),i("h3",{attrs:{id:"p38-拉取"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p38-拉取"}},[t._v("#")]),t._v(" p38 拉取")]),t._v(" "),i("ul",[i("li",[t._v("pull = fetch + merge")]),t._v(" "),i("li",[t._v("git fetch [远程库地址别名] [远程分支名]")]),t._v(" "),i("li",[t._v("git merge [远程库地址别名/远程分支名]")])]),t._v(" "),i("h3",{attrs:{id:"p40-解决冲突"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p40-解决冲突"}},[t._v("#")]),t._v(" p40 解决冲突")]),t._v(" "),i("p",[t._v("要点")]),t._v(" "),i("ul",[i("li",[t._v("如果不是基于Github远程库最新版本做的修改，不能推送，必须先拉去。")]),t._v(" "),i("li",[t._v("如果拉去后有冲突，则先解决冲突后，再推送")])]),t._v(" "),i("h3",{attrs:{id:"p41-跨团队协作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#p41-跨团队协作"}},[t._v("#")]),t._v(" p41 跨团队协作")]),t._v(" "),i("ul",[i("li",[t._v("Fork")]),t._v(" "),i("li",[t._v("A的项目a需要B来跨团队协作，那么B就去github访问项目地址，并点击项目页面的【Fork】")]),t._v(" "),i("li",[t._v("Fork完成之后，B也有了项目的远程库b，可以clone到本地进行修改。然后push到B的远程库b")]),t._v(" "),i("li",[t._v("B要将修改推送到A，需要发起Pull requests（位置在B的远程库b头部选项）")]),t._v(" "),i("li",[t._v("然后点击【New Pull request】进入页面，点击【Create pull request】。输入标题和内容，然后发送信息")]),t._v(" "),i("li",[t._v("此时A在项目a的页面的Pull requests就有一个信息，在其中可以进行沟通，代码审核和代码合并")])]),t._v(" "),i("h2",{attrs:{id:"远程库相关-使用ssh"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程库相关-使用ssh"}},[t._v("#")]),t._v(" 远程库相关，使用ssh")]),t._v(" "),i("ul",[i("li",[t._v("进入当前用户的家目录\n"),i("ul",[i("li",[t._v("cd ~")])])]),t._v(" "),i("li",[t._v("删除.ssh目录\n"),i("ul",[i("li",[t._v("rm -rvf .ssh")])])]),t._v(" "),i("li",[t._v("运行命令生成.ssh秘钥目录\n"),i("ul",[i("li",[t._v("ssh-keygen -t ras -C willone@gmail.com")]),t._v(" "),i("li",[t._v("【注意：-C 是大写】")])])]),t._v(" "),i("li",[t._v("进入.ssh目录查看文件列表\n"),i("ul",[i("li",[t._v("cd .ssh")]),t._v(" "),i("li",[t._v("ls -IF")])])]),t._v(" "),i("li",[t._v("查看id_rsa.pub文件内容\n"),i("ul",[i("li",[t._v("cat id_rsa.pub")])])]),t._v(" "),i("li",[t._v("复制id_rsa.pub文件内容，登录Github，点击用户头像--》Settings--》SSH and GPG keys")]),t._v(" "),i("li",[t._v("New SSH Keys 输入复制的秘钥信息")]),t._v(" "),i("li",[t._v("回到Git bush创建远程库地址别名\n"),i("ul",[i("li",[t._v("git remote add origin_ssh [远程库SSH地址]")]),t._v(" "),i("li",[t._v("git push origin_ssh [要推送的分支]")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);